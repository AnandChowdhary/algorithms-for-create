int maxconfetti=5;
Confetti[] confs=new Confetti[maxconfetti]; //this makes an array of 30 confettis

void setup()
{
    size(1000,1000);
    // here we fill the array with new objects: we also need to make the objects
    for (int j=0; j<maxconfetti; j++)
    {
        confs[j]= new Confetti();
    }
}

void draw()
{
    background(0);
    for (int j=0; j<maxconfetti; j++)
    {
        confs[j].move();
        confs[j].display();
        for (int i = 0; i < maxconfetti; i++)
        {
            if (i != j)
            {
                if (PVector.dist(confs[j].location, confs[i].location) <= (confs[i].radius + confs[j].radius))
                {
                    float jPosX = confs[j].location.x;
                    float jPosY = confs[j].location.y;
                    float iPosX = confs[i].location.x;
                    float iPosY = confs[i].location.y;
                    PVector jVelocity = confs[j].velocity;
                    PVector iVelocity = confs[i].velocity;
                    PVector axisj = new PVector(iPosX - jPosX, iPosY - jPosY);
                    PVector axisi = new PVector(jPosX - iPosX, jPosY - iPosY);
                    
                    float lengthAxisj = 1/pow(axisj.mag(),2);
                    float lengthAxisi = 1/pow(axisi.mag(),2);
                    
                    PVector aj = new PVector(pow(axisj.x,2)*jVelocity.x*lengthAxisj, pow(axisj.y,2)*jVelocity.y*lengthAxisj);
                    PVector ai = new PVector(pow(axisi.x,2)*iVelocity.x*lengthAxisi, pow(axisi.y,2)*iVelocity.y*lengthAxisi);

                    confs[j].velocity = new PVector(sqrt(pow(jVelocity.x,2) - pow(aj.x,2)),sqrt(pow(jVelocity.y,2) - pow(aj.y,2)));
                    confs[i].velocity = new PVector(sqrt(pow(iVelocity.x,2) - pow(ai.x,2)),sqrt(pow(iVelocity.y,2) - pow(ai.y,2)));;
                }
            }
        }
    }
}